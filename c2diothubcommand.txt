---------------------------------------------------------------------------------------------------------------------------------

    # Listening to commands executed from IoT Central.
        # This commands were define in the Device Template -> Model -> Commands
        # Calling function "execute_command_listener". This function listens for command requests and is able to take actions.
        # "device_client" is the object using class "IoTHubDeviceClient". This class helps an asynchronous device client that connects to IoT Central IoT Hub instance.

    listeners = asyncio.gather(
        execute_command_listener(
            device_client, method_name="reboot", user_command_handler=reboot_handler
        ),
        execute_command_listener(
            device_client,
            thermostat_1_component_name,
            method_name="getMaxMinReport",
            user_command_handler=max_min_handler,
            create_user_response_handler=create_max_min_report_response,
        ),
        execute_command_listener(
            device_client,
            thermostat_2_component_name,
            method_name="getMaxMinReport",
            user_command_handler=max_min_handler,
            create_user_response_handler=create_max_min_report_response,
        ),
        execute_property_listener(device_client),
    )

---------------------------------------------------------------------------------------------------------------------------------

# "execute_command_listener". Coroutine for executing listeners. These will listen for command requests.

async def execute_command_listener(
    device_client,
    component_name=None,
    method_name=None,
    user_command_handler=None,
    create_user_response_handler=None,
):
    """
    Coroutine for executing listeners. These will listen for command requests.
    They will take in a user provided handler and call the user provided handler
    according to the command request received.
    :param device_client: The device client
    :param component_name: The name of the device like "sensor"
    :param method_name: (optional) The specific method name to listen for. Eg could be "blink", "turnon" etc.
    If not provided the listener will listen for all methods.
    :param user_command_handler: (optional) The user provided handler that needs to be executed after receiving "command requests".
    If not provided nothing will be executed on receiving command.
    :param create_user_response_handler: (optional) The user provided handler that will create a response.
    If not provided a generic response will be created.
    :return:
    """
    while True:
        if component_name and method_name:
            command_name = component_name + "*" + method_name
        elif method_name:
            command_name = method_name
        else:
            command_name = None

        # "receive_method_request": Receive a method request via Azure IoT Hub inside IoT Central
            # https://docs.microsoft.com/en-us/python/api/azure-iot-device/azure.iot.device.aio.iothubdeviceclient?view=azure-python#azure-iot-device-aio-iothubdeviceclient-receive-method-request
        # "command_request.payload": Represents a request to invoke a direct method. Variable "payload" represents a request to invoke a direct method
            # https://docs.microsoft.com/en-us/python/api/azure-iot-device/azure.iot.device.methodrequest?view=azure-python
        command_request = await device_client.receive_method_request(command_name)
        print("Command request received with payload")
        values = command_request.payload
        print(values)

        if user_command_handler:
            await user_command_handler(values)
        else:
            print("No handler provided to execute")

        # Variables "response_status" and "response_payload" are been returned by "pnp_helper" and "create_response_payload_with_status"
        (response_status, response_payload) = pnp_helper.create_response_payload_with_status(
            command_request, method_name, create_user_response=create_user_response_handler
        )

        # "MethodResponse": Represents a response to a direct method request.
            # https://docs.microsoft.com/en-us/python/api/azure-iot-device/azure.iot.device.methodresponse?view=azure-python
        command_response = MethodResponse.create_from_method_request(
            command_request, response_status, response_payload
        )

        try:
            # https://docs.microsoft.com/en-us/python/api/azure-iot-device/azure.iot.device.aio.iothubdeviceclient?view=azure-python#azure-iot-device-aio-iothubdeviceclient-send-method-response
            await device_client.send_method_response(command_response)
        except Exception:
            print("responding to the {command} command failed".format(command=method_name))

---------------------------------------------------------------------------------------------------------------------------------

# "execute_property_listener". Function that handles writable property updates and generates the JSON response.
# "receive_twin_desired_properties_patch": Receive a desired property update via Azure IoT Hub inside IoT Central.
    #https://docs.microsoft.com/en-us/python/api/azure-iot-device/azure.iot.device.aio.iothubdeviceclient?view=azure-python#azure-iot-device-aio-iothubdeviceclient-receive-twin-desired-properties-patch

async def execute_property_listener(device_client):
    while True:
        patch = await device_client.receive_twin_desired_properties_patch()  # blocking call
        print(patch)
        properties_dict = pnp_helper.create_reported_properties_from_desired(patch)
        # "patch_twin_reported_properties": Update the reported properties of the device twin.
            # https://docs.microsoft.com/en-us/python/api/azure-iot-device/azure.iot.device.aio.iothubdeviceclient?view=azure-python#azure-iot-device-aio-iothubdeviceclient-patch_twin_reported_properties 
        await device_client.patch_twin_reported_properties(properties_dict)

---------------------------------------------------------------------------------------------------------------------------------
